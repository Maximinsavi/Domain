<div id="maxgram". style="max-width:420px;margin:10px auto;border-radius:12px;box-shadow:0 0 10px rgba(0,0,0,0.1);overflow:hidden;font-family:sans-serif;background:#fff;">
  <div style="background:#673ab7;color:#fff;padding:12px;font-size:18px;text-align:center;">🤖 MaxGram</div>
  <div id="chat" style="height:320px;overflow-y:auto;padding:10px;background:#f5f5f5;font-size:14px;display:flex;flex-direction:column;gap:10px;"></div>
  <form id="form" onsubmit="sendMsg(event)" style="display:flex;border-top:1px solid #ddd;">
    <input id="input" type="text" placeholder="Écris ici..." style="flex:1;padding:10px;border:none;outline:none;font-size:14px;">
    <button style="background:#673ab7;color:#fff;border:none;padding:0 15px;cursor:pointer;">➤</button>
  </form>
  <script>
    const chat = document.getElementById('chat');
    const input = document.getElementById('input');
    const API_KEY = "AIzaSyAXoP6bgNnxSznqBGzhKCTEy4pDkzoceek";
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;
    const STORAGE_KEY = "maxgram_history";
    let history = [];

    function formatTime() {
      const now = new Date();
      return now.getHours().toString().padStart(2, "0") + ":" + now.getMinutes().toString().padStart(2, "0");
    }

    function addMsg(text, sender = "user") {
      const wrapper = document.createElement("div");
      wrapper.style.display = "flex";
      wrapper.style.flexDirection = "column";
      wrapper.style.alignItems = sender === "user" ? "flex-end" : "flex-start";

      const bubble = document.createElement("div");
      bubble.style.padding = "10px";
      bubble.style.borderRadius = "10px";
      bubble.style.maxWidth = "75%";
      bubble.style.whiteSpace = "pre-wrap";
      bubble.style.wordWrap = "break-word";
      bubble.style.background = sender === "user" ? "#673ab7" : "#e0e0e0";
      bubble.style.color = sender === "user" ? "#fff" : "#000";
      bubble.textContent = text;

      const time = document.createElement("span");
      time.textContent = formatTime();
      time.style.fontSize = "11px";
      time.style.color = "#888";
      time.style.marginTop = "4px";
      time.style.alignSelf = sender === "user" ? "flex-end" : "flex-start";

      wrapper.appendChild(bubble);
      wrapper.appendChild(time);
      chat.appendChild(wrapper);
      chat.scrollTop = chat.scrollHeight;
    }

    function saveMessages() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
    }

    function loadMessages() {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) {
        history = JSON.parse(saved);
        for (const entry of history) {
          const text = entry.parts[0].text;
          const sender = entry.role === "user" ? "user" : "bot";
          addMsg(text, sender);
        }
      }
    }

    async function sendMsg(e) {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;
      addMsg(text, "user");
      history.push({ role: "user", parts: [{ text }] });
      saveMessages();
      input.value = "";

      try {
        const res = await fetch(API_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: history })
        });
        const data = await res.json();
        const reply = data.candidates?.[0]?.content?.parts?.[0]?.text || "❌ Aucune réponse.";
        addMsg(reply, "bot");
        history.push({ role: "model", parts: [{ text: reply }] });
        if (history.length > 20) history.shift();
        saveMessages();
      } catch (err) {
        addMsg("❌ Erreur réseau ou API.", "bot");
      }
    }

    loadMessages();
  </script>
</div>